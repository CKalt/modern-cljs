(ns modern-cljs.login
  (:require [modern-cljs.core :refer [welcome-page-remote authentication-remote]]
            [net.cgrand.enlive-html :as ]))


(def ^:dynamic *password-re* #"^(?=.*\d).{4,8}$")

(def ^:dynamic *email-re* #"^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$")

(defn sign-in [login-status]
  (destroy! (by-class "help"))
  (destroy! (by-class "error"))
  (if login-status
    (let [username (login-status :username)]
      (shore-macros/rpc (welcome-page-remote login-status) [welcome-page] (swap-content! (by-id "loginForm") welcome-page)))
    (prepend! (by-id "loginForm") (html [:div.help.email "Authentication Failed, wrong email or password"]))))

(defn validate-email [email]
  (destroy! (by-class "email"))
  (if (not (re-matches *email-re* (value email)))
    (do
      (prepend! (by-id "loginForm") (html [:div.help.email "Wrong email"]))
      false)
    true))

(defn validate-password [password]
  (destroy! (by-class "password"))
  (if (not (re-matches *password-re* (value password)))
    (do
      (append! (by-id "loginForm") (html [:div.help.password "Wrong password"]))
      false)
    true))

(defn validate-form [evt]
  (let [email (by-id "email")
        password (by-id "password")
        email-val (value email)
        password-val (value password)]
    (prevent-default evt)
    (if (or (empty? email-val) (empty? password-val))
      (do
        (destroy! (by-class "help"))
        (append! (by-id "loginForm") (html [:div.help "Please complete the form"])))
      (if (and (validate-email email)
               (validate-password password))
        (shore-macros/rpc (authentication-remote email-val password-val) [login-status] (sign-in login-status))
        false))))
